@import "{ox2:colors}/lib/oo-color-variables.import.less";

[btn] {
  font-size: 1.6rem;
  padding: 0 .7em;
  user-select: none;
  // padding: .5em .7em;
  border: 0;
  margin: 0;
  outline: none;
  text-align: center;
  cursor: pointer;
  vertical-align: middle;
  background-color: #c0392b;
  color: white;
  border-radius: .3em;
  background-color: @neutral;
  height: 2em;
  line-height: 2em;
  transition-property: all;
  transition-duration: 0.3s;
  font-family: "Roboto Condensed", "Helvetica Neue", Helvetica, Arial, sans-serif;

  -webkit-font-smoothing: antialiased; // crisper text

  // bad idea, ios compatibility
  // display: inline-flex;
  // align-items: center;
  // justify-content: center;

  &:active:enabled {
  // Same as in the colored button generator
    box-shadow: inset 0px 2px 6px rgba(0, 0, 0, 0.5), 0px 1px 0px rgba(255, 255, 255, 0.4);
    // creates faded text for mobile
    // color: rgba(255, 255, 255, 0.6);
    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.2);
    // removing background property would result in button fading to grey on long press
    background-color: lighten(@neutral, 15%);
    // removes background change on mobile devices
    transition-property: background;
    transition-duration: .5s;
  }

  & i {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  // i.icon-left {
  //   margin-right: .3em;
  // }

  // i.icon-right {
  //   margin-left: .3em;
  // }
}

  /**
   * Toggle
   * --------------------------------------------------
   */

  .item-toggle {
    pointer-events: none; }

  [toggle] {
    position: relative;
    display: inline-block;
    pointer-events: auto;
    margin: -5px;
    padding: 5px;
    cursor: pointer;
    display: flex;
  }
  [toggle] input:checked + .track {
    border-color: @neutral;
    background-color: @neutral;
  }
  [toggle].dragging .handle {
    background-color: #f2f2f2 !important;
  }

  [toggle] input {
    display: none; }

  /* the track appearance when the toggle is "off" */
  [toggle] .track {
    transition-timing-function: ease-in-out;
    transition-duration: 0.2s;
    transition-property: background-color, border;
    display: inline-block;
    box-sizing: border-box;
    width: 54px;
    height: 32px;
    border: solid 2px #E5E5E5;
    border-radius: 20px;
    background-color: #E5E5E5;
    content: ' ';
    cursor: pointer;
    pointer-events: none; }

  /* Fix to avoid background color bleeding */
  /* (occured on (at least) Android 4.2, Asus MeMO Pad HD7 ME173X) */
  .platform-android4_2 [toggle] .track {
    -webkit-background-clip: padding-box; }

  /* the handle (circle) thats inside the toggle's track area */
  /* also the handle's appearance when it is "off" */
  [toggle] .handle {
    transition: 0.2s ease-in-out;
    position: absolute;
    display: block;
    width: 28px;
    height: 28px;
    border-radius: 28px;
    background-color: #fff;
    top: 7px;
    left: 7px; }
    [toggle] .handle:before {
      position: absolute;
      top: -4px;
      left: -22px;
      padding: 19px 35px;
      content: " "; }

  [toggle] input:checked + .track .handle {
    transform: translate3d(22px, 0, 0);
    background-color: #fff; }




//
//      Color styles
//


@button-color-list: @color-keywords;
@button-color-list-lenght: length(@button-color-list);


// default outlined button
[btn~="outline"] {
  background-color: inherit;
  color: @neutral;
  border: 2px solid @neutral;
  height: ~"calc(2em - 4px)";
  line-height: ~"calc(2em - 4px)";
  box-sizing: content-box;

  &:active:enabled {
    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.3);
    border-color: darken(@neutral, 10%);
    background-color: inherit;
    color: darken(@neutral, 10%);
  }

  &[is-activated] {
      background-color: @neutral;
      color: inherit;
      cursor: default;
  }
}

[btn~="transparent"] {
  background-color: hsla(0, 0%, 0%, 0);

  &:active:enabled {
    background-color: hsla(0, 0%, 0%, 0);
    box-shadow: none;
    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.2);
  }
}

.create-colored-buttons(@counter) when (@counter > 0) {
  .create-colored-buttons((@counter - 1));
  @value: extract(@button-color-list, @counter);

  // Button background colors
  [btn~="@{value}"] {
    background-color: @@value;
  }

  // Colored buttons active state
  [btn~="@{value}"]:active:enabled {
  // Harsh mobile friendly effect
    box-shadow: inset 0px 2px 6px rgba(0, 0, 0, 0.5), 0px 1px 0px rgba(255, 255, 255, 0.4);
    // creates faded text for mobile
    // color: rgba(255, 255, 255, 0.6);
    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.2);
    // removing background property would result in button fading to grey on long press
    background: lighten(@@value, 15%);
    // removes background change on mobile devices
    transition-property: background;
    transition-duration: .5s;
  }

  // Outlined buttons created from a mixin
  [btn~="@{value}"][btn~="outline"]  {
    background-color: inherit;
    color: @@value;
    border-color: @@value;

    &:active:enabled {
      box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.3);
      border-color: darken(@@value, 10%);
      text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.4);
      color: darken(@@value, 10%);
      background-color: inherit;
    }

    &[is-activated] {
        background-color: @@value;
        color: inherit;
        cursor: default;
    }
  }

  [btn~="@{value}"][btn~="transparent"] {
    background-color: hsla(0, 0%, 0%, 0);
    color: @@value;

    &:active:enabled {
      background-color: hsla(0, 0%, 0%, 0);
      box-shadow: none;
      text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.2);
      color: darken(@@value, 10%);
    }

    &[is-activated] {
        background-color: @@value;
        color: white;
        cursor: default;
    }
  }

  // Toggle control
  [toggle~="@{value}"] input:checked + .track {
    border-color: @@value;
    background-color: @@value;
  }

  // Button text colors
  [btn~="text:@{value}"] {
    color: @@value !important;
  }
}

// Call create
.create-colored-buttons(@button-color-list-lenght);


//
//      White button
//


[btn~="white"] {
  background-color: @white;
  border-color: @white;
  color: inherit;

  &:active:enabled {
    box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.3), 0px 1px 0px rgba(255,255,255, .4);
    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.2);
    background-color: rgba(255,255,255, .3);
    transition-property: none;
    transition-duration: .5s;
    color: inherit;
  }
}

[btn~="text-left"] {
  text-align: left;
  justify-content: flex-start;
}

[btn~="text-right"] {
  text-align: right;
  justify-content: flex-end;
}

[btn~="pull-left"] {
  margin-right: auto;
}

[btn~="pull-right"] {
  margin-left: auto;
}

[btn~="clip"] {
  color: inherit;
}

[btn~="material"] {
  text-transform: uppercase;
  font-family: "Roboto";
  font-weight: 500;
}

[btn] {

  .text-icon {
    font-size: .8em;
  }
}

[btn~="icon-only"] {
  padding: 0 .5em;
}

[btn~="is-faded"] {
  opacity: .4;
}

[btn~="font-normal"] {
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
}

[btn~="push"], [item-title~="push"] {
  margin: 0 .7rem;
}

[btn~="push-left"], [item-title~="push-left"] {
  margin-left: .7rem;
}

[btn~="push-right"], [item-title~="push-right"] {
  margin-right: .7rem;
}

[btn~="push-top"] {
  margin-top: .7rem;
}

[btn~="push:top:1.3"] {
  margin-top: 1.3rem;
}

[btn~="push-bottom"] {
  margin-bottom: .7rem;
}

[btn~="push-all"] {
  margin: .7rem;
}

[btn~="uppercase"] {
  text-transform: uppercase;
}

//
//      Sizes
//

[btn~="tiny"] {
  font-size: 1.2rem;
}

[btn~="small"] {
  font-size: 1.4rem;
}


[btn~="large"] {
  font-size: 2.1rem;
  height: 1.9em;
  line-height: 1.9em;

  &[btn~="outline"] {
    height: ~"calc(1.9em - 4px)";
    line-height: ~"calc(1.9em - 4px)";
  }

  &[btn~="block"] {
    line-height: 1;
    height: 100%;
  }

  &[btn~="transparent"] {
    padding: 0 .4em; // less spacing for visual alignment
  }
}

[btn~="x-large"] {
  font-size: 2.4rem;
  height: 1.9em;
  line-height: 1.9em;

  &[btn~="outline"] {
    height: ~"calc(1.9em - 4px)";
    line-height: ~"calc(1.9em - 4px)";
  }

  &[btn~="block"] {
    line-height: 1;
    height: 100%;
  }
}


[btn~="jumbo"] {
  font-size: 3.2rem;
  height: 1.8em;
  line-height: 1.8em;

  &[btn~="outline"] {
    height: ~"calc(1.8em - 4px)";
    line-height: ~"calc(1.8em - 4px)";
  }

  &[btn~="block"] {
    line-height: 1;
    height: 100%;
  }
}


//
//      Shapes
//


[btn~="rounded"] {
  border-radius: 10px;
}

[btn~="pill"] {
  border-radius: 20em;
}

[btn~="circle"] {
  border-radius: 50%;
  padding: 0;
  width: 2em;

  &[btn~="large"] {
    width: 1.9em;
  }

  &[btn~="jumbo"] {
    width: 1.8em;
  }
}


[btn~="sharp"] {
  border-radius: 0;
}

[btn~="sharp-left"] {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}

[btn~="sharp-right"] {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

[btn~="lvl-2"] {
  z-index: 2;
}


[btn~="tab"] {
  border-radius: 0;
  border-width: 1px;
  border-right-width: 0;
  box-sizing: border-box;
  height: 2em;

  &:first-child {
    border-top-left-radius: .3em;
    border-bottom-left-radius: .3em;
  }

  &:last-child {
    border-top-right-radius: .3em;
    border-bottom-right-radius: .3em;
    border-right-width: 1px;
  }
}

[btn~="tab-sharp"] {
  border-radius: 0;
  border-width: 1px;
  border-right-width: 0;

  &:last-child {
    border-right-width: 1px;
  }
}




[btn~="icon-large"] {
  line-height: 1;
  padding: 0 .35em; // normalize size with standard icon only buttons

  & i, & span {
    font-size: 130%;
    vertical-align: middle;
  }

  &[btn~="outline"] {
    padding: 0 .55em; // more spacing for icon only outline button
    vertical-align: initial;

    & i, & span {
      vertical-align: initial;
    }
  }

}

[btn~="icon-jumbo"] {
  line-height: 1;
  padding: 0 .16em; // normalize size with standard icon only buttons

  & i, & span {
    font-size: 170%;
    vertical-align: middle;
  }

  // Only works for short icons like chevron up or down
  &[btn~="outline"] {
    padding: 0 .55em; // more spacing for icon only outline button

    & i, & span {
      vertical-align: initial;
    }
  }
}

[btn~="block"] {
  width: 100%;
  height: 100%;
  border-radius: 0;
  line-height: 1;
  box-sizing: border-box;
}

[btn~="is-positioned"] {
  position: absolute;
}

[btn~="draggable"] {
  cursor: grab;

  &.is-dragging {
    cursor: grabbing;
  }
}

[btn] {

  &.is-selected {
    &::before {
      content: "";
      border: 2px dashed @neutral;
      position: absolute;
      left: -5px;
      bottom: -5px;
      right: -5px;
      top: -5px;
      border-radius: 50%;
    }
  }

}

[btn~="capitalize"] {
  text-transform: capitalize;
}

// outlined button hack for not being 100% width in list
[btn~="border-box"] {
  box-sizing: border-box;
}
// same hack for outlined, rethink the API
[btn~="h-initial"] {
  height: initial;
}

// XX temp hack
[btn~="block-item"] {
  display: block;
}

// XX temp hack
[btn~="full-width"] {
  width: 100%;
}

[btn~="block-h"] {
  // width: 100%; XXX messes up aligment when ading padding do not set
  flex: 1;
}

[btn~="block-v"] {
  height: 100%;
  border-radius: 0;
  line-height: 1;
  box-sizing: border-box;
}

[btn~="raised"] {
  transition: box-shadow 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  transition-delay: 0.2s;
  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);

  // &:active:enabled {
  //   box-shadow: 0 8px 17px 0 rgba(0, 0, 0, 0.2);
  //   transition-delay: 0s;
  // }
}

[tabs] {
  display: flex;
}

[tabs~="center"] {
  justify-content: center;
}

[btn] {

  .dot {
    position: absolute;
    right: 3px;
    top: 3px;
    width: 8px;
    height: 8px;
    border-radius: 50%;
  }
}


[btn~="has-positioning"] {
  position: relative;
}

[btn~="cursor:default"] {
  cursor: default;
}

[btn~="outline-thin"] {
  border-width: 1px;
}

